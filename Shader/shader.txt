*之後學習 : https://www.jianshu.com/p/4e8162ed0c8d
https://www.jianshu.com/p/80a932d1f11e
https://blog.csdn.net/mobilebbki399/article/details/50493117
https://www.patreon.com/posts/quick-game-art-15265060
https://www.patreon.com/posts/quick-game-art-15121329



o.vertex = UnityObjectToClipPos(v.pos);
o.uv =   TRANSFORM_TEX(v.texcoord,_MainTex);    =>  o.uv = v.texcoord.xy * _MainTex_ST.xy + _MainTex_ST.zw;
o.normal = UnityObjectToWorldNormal(normal);	
(法線詳解 : https://blog.csdn.net/candycat1992/article/details/41605257)


Unity座標系轉換

模型座標 -> 世界座標 -> 相機座標  -(投影變換)>  剪裁座標 -> NDC[螢幕空間，假如 1280x720 => x:1280 y:720] -> 屏幕座標


1: transform.localToWorldMatrix 局部轉世界的矩陣;
2: transfrom.worldToLocalMatrix 世界座標轉局部座標矩陣;
　MultiplyPoint, MultiplyPoint3x4 MultiplayVector 來進行座標變換;
4: shader中 左乘_World2Object矩陣來實現世界座標轉局部座標變換;
5: shader中左乘_Object2World矩陣來實現局部轉世界的轉換; 
6: UNITY_MATRIX_MV 基本變換矩陣 x 攝像機矩陣;
7: UNITY_MATRIX_MVP 基本變換矩陣x攝像機矩陣x投影矩陣;
8: UNITY_MATRIX_V 攝像機矩陣;
9: UNITY_MATRIX_P 投影矩陣;
10: UNITY_MATRIX_VP攝像機矩陣x投影矩陣;
11: UNITY_MATRIX_T_MV (基本變換矩陣 x 攝像機矩陣) 轉置矩陣;
12: UNITY_MATRIX_IT_MV(基本變換矩陣 x 攝像機矩陣) 的逆轉置矩陣;
13: UNITY_MATRIX_TEXTURE0 紋理變化矩陣;

------------------------------------------------------------------------

* 燈光 詳解 https://blog.csdn.net/candycat1992/article/details/42460959 

_LightColor0				//Unity 當前燈光顏色
UNITY_LIGHTMODEL_AMBIENT		//Unity 片段渲染 - 環境光

-------------------------------------------------------------------------

Shader 型態
	*Int
	*Float
	*Range
	*Color
	*Vector
	*2D

_Time.x 、 _Time.y 、 _Time.z 、 _Time.w  => (t/20, t, t*2, t*3)


Tags {}

{ "RenderType"="Opaque" }	//渲染物件是否透明 
透明 Opaque ， 非透明 Transparent
( * 另外補充 : "IgnoreProjector"="True" 不被Projectors影響 )
("ForceNoShadowCasting"="True"(不產生陰影))


 -----------  渲染順序 ------------->  ( 越大越後渲染，疊越高)

("Queue"="xxx" (指定渲染順序，越後渲染疊越上層))
* Background - 最早渲染天空盒或背景
* Geometry - 渲染非透明物 (預設)
* AlphaTest - 渲染 Alpha Test的像素
* Transparent - 從後往前的方式渲染透明物体
* Overlay - 用來渲染疊加的效果，是渲染的最後階段(比如鏡頭光暈等特效)

---------------------------------------
-------------常用Shader設定-------------

* RenderType	//用一個Shader取代目前攝影機照射到的Shader
* ColorMask RGB	//可以忽略某種顏色  ColorMask R  ,  ColorMask RG , ColorMask RGB

* Cull Back—— 不繪製背面
* Cull Front—— 不繪製前面
* Cull Off —— 顯示所有面

* ZWrite On | Off  如果需要繪製純色物體 -> ZWrite On。
		 如果要繪製半透明效果 -> ZWrite Off 。
* Zwrite 預設 on  , 是否要進行深度渲染  -> 依照攝影機Z軸渲染距離越遠先渲染

* ZTest  深度測試 ， 預設 LEqual
正常的物件排序效果 : LEqual、Less
被遮擋才會渲染效果 : GEqual、Greater
永遠不會被遮擋 : Always、NotEqual
雷人用的 : Equal


* Blend SrcAlpha OneMinusSrcAlpha   //輸出顏色與畫面顏色做碰撞 -> 弄出半透明體


* LOD (設置數值取決可以使用下面哪項功能) 
VertexLit及其系列 = 100
Decal, Reflective VertexLit = 150
Diffuse = 200
Diffuse Detail, Reflective Bumped Unlit, Reflective Bumped VertexLit = 250
Bumped, Specular = 300
Bumped Specular = 400
Parallax = 500
Parallax Specular = 600

EndTags
------------------------------------------
--------------- 片段渲染  ----------------

"LightMode"="xxxx"
Always : 不管使用哪種渲染路徑，不會計算任何光照
ForwardBase : 向前渲染，Pass會計算環境光、平行光、逐頂點/SH光源和Lightmaps
ForwardAdd : 向前渲染，Pass計算額外像素光源，每個Pass對一個光源
Deferred : 延遲渲染，該Pass渲染 G-buffer 緩沖
ShadowCaster : 物體深度渲染到 陰影紋理 或 深度紋理
PrepassBase : 遺留的延遲渲染，Pass 渲染法線 和 高光反射的指數部分
PrepassFinal : 遺留的延遲渲染，Pass通過合併紋理、光照、自發光來取得最後的顏色

---------------------------------------------------------------------------

* 抓取 (螢幕位置) 渲染

GrabPass{ "GrabPassTexture" }
sampler2D GrabPassTexture;

v2f vert(appdata_base v)
{
	o.grabPos = ComputeGrabScreenPos(o.pos);   //MVP空間轉到螢幕空間
}
half4 frag(v2f i) : SV_Target		//用tex2Dproj、UNITY_PROJ_COORD等，可以處理跨平台等問題。
{
	fixed4 color = tex2Dproj(_GrabTexture, UNITY_PROJ_COORD(i.grabPos));
}


fixed4 frag (v2f v) : SV_Target
{
	float2 wcoord = (v.scrpos.xy / v.scrpos.w);
	return fixed4(wcoord , 0 , 0);
}


* 抓取場景物件深度

sampler2D _CameraDepthTexture;

v2f vert()
{
	o.scrPos = ComputeScreenPos(o.pos);	//將齊次座標返回屏幕座標
	COMPUTE_EYEDEPTH(o.scrPos.z);		//計算頂點到攝影機的深度
}
fixed4 frag (v2f i)
{
	float depth = tex2Dproj(_CameraDepthTexture, UNITY_PROJ_COORD(i.scrPos)).r;
	depth = LinearEyeDepth(depth);


	---------------------------------------------------------------------------

	float depth = UNITY_SAMPLE_DEPTH(tex2D(_CameraDepthTexture, i.uv));

	float linear01Depth = Linear01Depth(depth);	//將深度圖以 Linear 方式顯示，轉換成[0,1]內的線性變化深度值				
	return linear01Depth;				

-------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------

* 空間計算轉換

	struct v2f
	{
		float3 vertex : SV_POSITION;
	}
	v2f vert(appdata_base v)
	{	
		1. o.vertex = UnityObjectToClipPos(v.vertex); 
			<= or => 
				mul(unity_ObjectToWorld, v.vertex).xyz; 物體座標位置，返回float3
		


		* 世界座標求算 ---------------------------------------

		float3 worldPos = mul(unity_ObjectToWorld, v.vertex);

		* 物體法向量求算 -------------------------------------

		float3 worldNormal = normalize(mul(v.normal , (float3x3)unity_WorldToObject)); 世界座標法線向量
		
		--------------------------------------------------------
		
		* Camera 世界座標位置

		_WorldSpaceCameraPos	//相機的世界座標空間位置
		
		---------------------------------------------------------

		* 攝影機照射方向

		UnityWorldSpaceViewDir(o.worldPos)	//輸入一個頂點位置，返回頂點位置到攝影機照射的方向(沒有規一化)
		UnityWorldSpaceViewDir == _WorldSpaceCameraPos.xyz - mul(unity_ObjectToWorld, v.vertex.xyz);

		---------------------------------------------------------

		* 模型空間的燈光位置方向
		
		ObjSpaceLightDir(float3)
		normalize(_WorldSpaceLightPos0.xyz) == normalize(UnityWorldSpaceLightDir(float4)) //輸入一個頂點位置，判斷頂點位置到光源的方向(沒有規一化)
	
		---------------------------------------------------------
	}
	

* #pragma 和 #include 內建函式

	#pragma multi_compile_fwdbase 指定確保可以在shader中使用光源衰弱，和陰影使用
	#include "Lighting.cginc" 當使用 _Lighting0 時，必須套用
	#include "AutoLight.cginc"	使用陰影投影，必須套用


* 陰影計算 (使用範例)

	struct v2f
	{
		SHADOW_COORDS(int) <-- (int)選擇一個尚未使用的Texcoord通道 -> 渲染時必須站一個通道位置
	}
	v2f vert()
	{
		v2f o;	
		TRANSFER_SHADOW(o);
	}
	fixed4 frag()
	{
		float attenuation = SHADOW_ATTENUATION(i);
		return lerp(_MainColor*_ShadowColor,_MainColor,attenuation);
	}



*v2f vert(這裡)  可以更改為以下，優點是不需再宣告appdata(可以取代)

	v2f vert(appdata_base / appdata_tan / appdata_full) 頂點數據 提供給 頂點程序
	appdata_base : 頂點由位置、法向、一個紋理座標 構成
	appdata_tan : 頂點由位置、切線、法向、一個紋理座標 構成
	appdata_full : 頂點由位置、切線、法向、兩個紋理座標 和 顏色 構成

----------------------------------------------
--------------- 物體漫射光固定公式 -----------

漫射光 - 公式 : (c * m)max(0 , n * i)

fixed3 albedo = tex2D(_MainTex, i.uvMainTex).rgb * _Color;
fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz;
fixed3 diffuse = _LightColor0.rgb * albedo * max(0, dot(worldNormal, worldLightDir));
return fixed4(ambient + diffuse, 1);

* saturate 和 max 是差不多功能一樣的東西，因此隨便使用一個都可以
------------------------------------------------
---------------- 切線空間 ---------------------

# tengent space rotation matrix 是 float3x3( v.tangent.xyz, binormal, v.normal)

struct appdata 
{
	float4 tangent : TANGENT;
};

# 解析 tengent 要用float4 而不是 float3 :
   Maya 計算vertex 的 tangent 是靠 UV，而UV的順序有正向和反向，
  例如我們在作一個玩全對稱的模型時，UV通常為了節省空間，我們會先unwrap
   一半 mesh 後 把另外一半反過來重疊UV。這時候就有UV是正向和反向。為了
  計算出正確的tangent space 我們需要第四個float 去記錄UV的方向

binormal = cross( normalize(v.normal), normalize(v.tangent.xyz)) *  v.tangent.w  公式

# TANGENT_SPACE_ROTATION : 將 object space 轉換到 tangent space中。
  就是完成以上的步驟，使用後會自動定義了 rotation 這個變數

# TRANSFER_VERTEX_TO_FRAGMENT : 將光照信息傳遞給像素著色器。
  在 AutoLight.cginc 定義，會根據 pass 處理的光源類型來計算光源座標的具體值
  ，來進行和 shadow 相關的計算等。


v2f vert(appdata_tan v)
{
	o.lightDir = mul(rotation, ObjSpaceLightDir(v.vertex));
}

* 進行切線空間計算時，需先轉換成世界座標後，才能轉換成為切線座標

fixed4 packedNormal = tex2D(_BumpTex, i.uv.zw);
fixed3 tangentNormal = UnpackNormal(packedNormal);	//將 Texture Type -> Normal Map，取得正確的法向量

------- world space to tangent space 的 旋轉矩陣 ---------------

* TANGENT_SPACE_ROTATION 的函式，在執行以下的動作：
 float3 binormal = cross( v.normal, v.tangent.xyz ) * v.tangent.w;
 float3x3 rotation = float3x3( v.tangent.xyz, binormal, v.normal );


* UnpackNormal(fixed4) 是在做下面的事情，所以可以直接用函式做取代
 fixed4 normal = tex2D(_Bump, i.uv);
 fixed3 norm;
 norm.xy = normal.wy * 2 - 1;



切線空間 : 主要應用在光源上，針對模型不同面做出亮度調整
o.lightDir = mul(rotation, ObjSpaceLightDir(v.vertex));
-----------------------------------------------
---------------- 表面渲染 surf -----------------
struct Input
{
	float3 viewDir;			//抓取攝影機視線方向
}


 #pragma surface surf Lambert 光照貼圖  (*注意:不能有Pass)
void surf(Input IN , inout SurfaceOutput o){}

#SurfaceOutput : https://docs.unity3d.com/560/Documentation/Manual/SL-SurfaceShaders.html



(* 注意 : (要改變Alpha時，則變成 - #pragma surface surf Lambert alpha : fade - ))
UnpackNormal()將顏色空間的法線[0,1],轉換到真正的3D空間裡的法線範圍[-1,1]
TRANSFORM_TEX(紋理 , sampler2D); => v.texcoord.xy * _MainTex_ST.xy + _MainTex_ST.zw;




*surf 包含兩個結構體 + 四個函數

1. void vert(inout appdata_full v)    

2. #pragma surface surf CustomDiffuse (CustomDiffuse 是name)
shader對名字有嚴格規定，因此Lighting<Your Chosen Name> => LightingCustomDiffuse
inline float4 LightingCustomDiffuse (SurfaceOutput s, fixed3 lightDir, fixed atten){}
				    (點做光線處理   、	光線方向     、光衰減系數)
Ex :
inline float4 LightingCustomDiffuse (SurfaceOutput s, fixed3 lightDir, fixed atten) {
		    float difLight = max(0, dot (s.Normal, lightDir));
		    difLight = (difLight + 0.5) * 0.5;
		    float4 col;
		    col.rgb = s.Albedo * _LightColor0.rgb * (difLight * atten * 2);
		    col.a = s.Alpha;
		    return col;
		}


3. finalcolor:final 
ex : #pragma surface surf Lambert finalcolor:final 
=> void final(Input IN, SurfaceOutput o, inout fixed4 color){}


4.
float3 normal = UnpackNormal(tex2D(_NormalTex, IN.uv_NormalTex));
	=> 為甚麼要用 UnpackNormal?  通常要把貼圖"Texture Type"設置為 "Normal Map"才會顯示正確。
		UnpackNormal 直接幫我們處理了這件事

-------------- UnpackNormal 函式介紹 ----------------------
inline fixed3 UnpackNormalDXT5nm (fixed4 packednormal)
{
	fixed3 normal;
	normal.xy = packednormal.wy * 2 - 1;
#if defined(SHADER_API_FLASH)
	// Flash does not have efficient saturate(), and dot() seems to require an extra register.
	normal.z = sqrt(1 - normal.x*normal.x - normal.y * normal.y);
#else
	normal.z = sqrt(1 - saturate(dot(normal.xy, normal.xy)));
#endif
	return normal;
}
 
inline fixed3 UnpackNormal(fixed4 packednormal)
{
#if (defined(SHADER_API_GLES) || defined(SHADER_API_GLES3)) && defined(SHADER_API_MOBILE)
	return packednormal.xyz * 2 - 1;
#else
	return UnpackNormalDXT5nm(packednormal);
#endif
}
------------------------------------------------------------------	

-----------------------------------------------
------------- Shader 函式使用解析 -------------   (重要)

*Shader 全計算函式解析 -> http://blog.csdn.net/laverfever/article/details/23962411
*常用空間計算函數 -> http://blog.csdn.net/biezhihua/article/details/78587898

---------------------------------------------------