https://blog.csdn.net/zhenghongzhi6/article/details/79229585		//UniRx 解析
https://www.jianshu.com/p/94b857be40ec		//實戰筆記
https://kuailey.github.io/DungeonsGame/2016/11/06/UniRx-%E5%AD%A6%E4%B9%A0/	//詳細說明


* 重點 : Subscribe() 輸出後，並不會停止訂閱。
	var disposable = new CompositeDisposable();	
	disposable.Disposable = Observable.EveryUpdate()
    		.Subscribe(_ =>
    		{
        		if ()
        		{
           			 disposable.Dispose();		**** 此行可以停止繼續訂閱
        		}
    		});

Observable.Create  ( OnNext() 會執行給入值，到OnCompleted()停止，最後執行Disposable.Create的方法)
	Ex : 	var obs = Observable.Create<int>(x => 
        	{
            		x.OnNext(3);
            		x.OnNext(4);
            		x.OnCompleted();

            		return Disposable.Create(() => Fn_Move(3f));
        	});

        	obs.Subscribe(x => Debug.Log(x));
	

Observable.Defer()  直到觀察者訂閱時，才創建 Observable
	Ex : 	var random = new System.Random();
        	var obser = Observable.Defer(() => Observable.Start(() => random.Next(0, 5)))
            		.Delay(TimeSpan.FromMilliseconds(1000))
            		.Repeat();

        	obser.Subscribe(x => Debug.Log(x));



Buffer		Observable.Range(0, 10)
        		.Buffer(3)
        		.Subscribe(xx => Debug.Log(xx[0]));
		(輸出結果 = 0 , 3 , 6 , 9)
	

Do	(呼叫方法)
	Ex : Observable.Range(0 , 3)
            	.Do(e => Fn_Debug(e))
            	.Subscribe();



When 等待完成  
WhenAll 等待所有完成，將資料結合
	Ex : 	var heavyMethod = Observable.Start(() => { return 10; });
    		var heavyMethod2 = Observable.Start(() => { return 20; });
    		Observable.WhenAll(heavyMethod, heavyMethod2)
        		.Subscribe(xs =>
        		{
            			Debug.Log(xs[0] + ":" + xs[1]);
        		});

yield return Observable.Range(0, 10).StartAsCoroutine()		回傳完成後的最後一個數值
	*  類似 for 迴圈的概念

Observable.Start	申明此函式只會執行一次
Observable.EveryUpdate() 做Update執行


Buffer(int)		緩衝。輸入int當數量達到一定數值，才一次性輸出
Buffer(int , int)	(不一定要寫) 緩衝。第二個 int 表示要輸出的數量

Observable.Defer	延遲評估
	* Ex : Return 數值會固定，與 Create不同。此時可以使用 Defer 延遲，讓數值不固定
		Observable.Defer(() => Observable.Return(random.Next()))

Return		返回數據
	Ex : Observable.Return(new Vector2(0, 1.5f)).Subscribe(v => gameObject.transform.position = v);

	Ex : var value = Observable.Return<string>("value");
        		value.Subscribe(x => Debug.Log(x));

Interval	每一段時間後，發送一次
	Ex : Observable.Interval(TimeSpan.FromMilliseconds(1000))
        	.Subscribe(_ => { Debug.Log(_); });


Throttle	過一段時間，如果數據還沒放出時，等待幾秒暫停後才繼續執行
ThrottleFirst	先執行後，等待幾秒才能再次執行
	Ex :  	var clickStream = Observable.EveryUpdate()
        	.Where(_ => Input.GetMouseButtonDown(0));

    		clickStream.Buffer(clickStream.Throttle(TimeSpan.FromMilliseconds(250)))
        		.Where(xs => xs.Count >= 2)
        		.Subscribe(xs => Debug.Log("click count:" + xs.Count));


Select(i=>(int)i)
Select(i => i + 1) 定義變數
Select(_ => 2)	以兩倍速度執行以下代碼


First		只發射第一個完成的數據
FirstOrDefault	( 協程使用 ) 直到完成第一件事情
	Ex : yield return this.OnCollisionEnterAsObservable()
        	.FirstOrDefault()
        	.Select(x => x.gameObject)
        	.Timeout(TimeSpan.FromSeconds(3))
        	.StartAsCoroutine(x => result = x, error => isTimeout = true);
	


Take(3)		(重複幾次的行為)
	Ex : Observable.Interval(TimeSpan.FromSeconds(1))
            .Select(i => i + 1)
            .Take(3)
            .Subscribe(xx =>
            {
                Debug.Log("SelectMany:" + xx);
            });


TakeUntil(this.UpdateAsObservable().Where(_ => Input.GetMouseButtonDown(0))	等待某個條件完成
TakeWhile(count => count < 2)		//可以決定等待秒數
		
		*(只能在 Take 尾部套用 ) Repeat()	當OnCompleted出現時，重新調用


Last		只發射最後一個數值
Distinct	過濾重複的選項
	Ex : var ss = new int[] { 1, 2, 5, 5, 6, 8, 9, 6 };
        	ss.ToObservable()
            	.Distinct()
            	.Subscribe(xx =>
            	{
            	    Debug.Log(xx);
            	});



