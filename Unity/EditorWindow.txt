using UnityEditor ; 		<------
public class AlphaMaskWindow : EditorWindow  <----   這樣才能使用

[MenuItem("Tools/Alpha Mask Maker")]  
	private static void OpenWindow()  
	{  
		EditorWindow.GetWindow<AlphaMaskWindow> ().Show ();  
	} 



-----------------------------	我是分隔線	------------------------------

			     (物件)     (型態)		//(假如宣告為Object，跑出存放Object的UI欄位)
EditorGUILayout.ObjectField (null , typeof(Object) , false);		

GUILayoutOption[] options = new []{GUILayout.Width(128) , GUILayout.Height(128)};	//改變欄位寬、高

EditorGUI.MultiFloatField (
	new Rect(30 , 100 , 200 , EditorGUIUtility.singleLineHeight) , new GUIContent("Label") , contexts , numbers);
	//宣告Vector3欄位   X[] , Y[] , Z[]


EditorStyles.miniButtonLef	欄位靠左補正空隙
EditorStyles.miniButtonMid	欄位靠中補正空隙
EditorStyles.miniButtonRight	欄位靠右補正空隙


SerializedProperty ser = serializedObject.FindProperty("抓取的變數名稱");
SerializedProperty nameID = npc.FindPropertyRelative("放下一層變數名稱");



** EditorGUILayout 與 GUILayout 的差距
以
EditorGUILayout.Toggle ("EditorGUILayout.Toggle" , false); 
GUILayout.Toggle (false , "EditorGUILayout.Toggle");   作範例 ------------------


Event guiEvent = Event.current;			//當前事件
Rect.Contains(guiEvent.mousePosition)		//可判斷 鼠標 是否在目標身上


 * 子物件 繪製
EditorGUILayout.LabelField ("Parent");
EditorGUI.indentLevel++;
EditorGUILayout.LabelField ("Child");
EditorGUI.indentLevel--;
EditorGUILayout.LabelField ("Parent");


 ***** 判斷 BeginChangeCheck ~ EndChangeCheck 之間，是否有變數的變動

	EditorGUI.BeginChangeCheck();
        Color newColor = EditorGUILayout.ColorField(gradient.GetKey(selectedKeyIndex).Colour);

        if (EditorGUI.EndChangeCheck())
        {
            
        }


EditorGUI.PropertyField 繪製欄位

 	* 簡易 PropertyDrawer 用法 --
	public override void OnGUI(Rect position, SerializedProperty property, GUIContent label)
    	{
        	Range2Attribute range2 = (Range2Attribute)attribute;

        	if (property.propertyType == SerializedPropertyType.Integer)		//當變數為 int 時候
        	{
	    		EditorGUI.IntSlider(position , property , range2.min , range2.max , label);		// 繪製滾輪
        	}
        	else
        	{
            		EditorGUI.PropertyField(position , property , label);		//繪製普通欄位
        	}
    	}


	public override float GetPropertyHeight(SerializedProperty property, GUIContent label)		//設定 UI高度

	
	CustomGradient gradient = (CustomGradient)fieldInfo.GetValue(property.serializedObject.targetObject);	//獲取對象腳本
	GUI.skin.label.CalcSize(label).x		//單字寬度




