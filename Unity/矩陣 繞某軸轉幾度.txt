matrix.SetTRS (transform.position , transform.rotation , transform.localScale);

		matrix.m11 = Mathf.Cos (angle * Mathf.Deg2Rad);
		matrix.m12 = -Mathf.Sin (angle * Mathf.Deg2Rad);
		matrix.m21 = Mathf.Sin (angle * Mathf.Deg2Rad);
		matrix.m22 = Mathf.Cos (angle * Mathf.Deg2Rad);

		float qw = Mathf.Sqrt (1f + matrix.m00 + matrix.m11 + matrix.m22) / 2;   // 公式
		float w = 4 * qw;
		float qx = (matrix.m21 - matrix.m12) / w;	// 公式
		float qy = (matrix.m02 - matrix.m20) / w;	// 公式
		float qz = (matrix.m10 - matrix.m01) / w;	// 公式

		this.transform.rotation = new Quaternion (qx,qy,qz,qw);