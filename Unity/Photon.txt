 * 凡是套用 Photon 腳本或者要使用 (PhotonNetwork.Instantiate("要產生的這個物件")) 的物件都必須掛上 photonView.cs
 

 * [ RPC概念 ] : 當玩家離開房間時，若當物件想保留不消失給其他Client使用的話，則套用。 
(用太多 RPC ，過多的傳輸造成Queue溢滿引發 QueueIncomingReliableWarning 錯誤)

Vector3 pos = new Vector3(Random.Range(-5f, 5f), 0, 0);
Instantiate(Prefab , pos, Quaternion.identity);			//先在自己的遊戲建立 (不是photon建立)，之後再套用 RPC

PhotonView photonView = PhotonView.Get(this);
photonView.RPC("PutBomb" , PhotonTargets.All , pos);

[PunRPC]
void PutBomb(Vector3 BombPos)
{
	Instantiate(Prefab, BombPos, Quaternion.identity);
}



* 普通物件建立 : PhotonNetwork.Instantiate ()

* 自動連線 : 
void Awake()
{
	PhotonNetwork.ConnectUsingSettings("1.0");              //加入時，自動連線
}

photon 當前連線狀態 : PhotonNetwork.connectionStateDetailed

* 建立房間 :

PhotonNetwork.CreateRoom("" , new RoomOptions()
                    { maxPlayers = 4 }, null);
public void OnCreatedRoom()
{
        Debug.Log("OnCreatedRoom");
}

* 加入房間 :

RoomInfo[] roomInfo = PhotonNetwork.GetRoomList();
if (roomInfo.Length > 0)
{
	// 將所有房間列表轉成字串陣列
        string[] roomNames = new string[roomInfo.Length];
        for (int i = 0; i < roomInfo.Length; i++)
        {
        	roomNames[i] = roomInfo[i].name;
        }

        roomSel = GUILayout.SelectionGrid(roomSel, roomNames, 1,
        GUILayout.Width(200));
        if (GUILayout.Button("Join Room"))
        {
        	ErrorMessage = "";
                if (playerName.Length > 0)
                {
                	PhotonNetwork.playerName = playerName;
                        PhotonNetwork.JoinRoom(roomNames[roomSel]);
                }
                else
                {
                        ErrorMessage = "You must input playername.";
                }
         }
}